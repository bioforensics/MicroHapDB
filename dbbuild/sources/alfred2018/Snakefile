# -----------------------------------------------------------------------------
# Copyright (c) 2019, Battelle National Biodefense Institute.
#
# This file is part of MicroHapDB (http://github.com/bioforensics/microhapdb)
# and is licensed under the BSD license: see LICENSE.txt.
# -----------------------------------------------------------------------------

import pandas
from utils import smartopen, parse_markers_from_table, alfred_marker_detail_scrape, alfred_pop_data


MARKERS = parse_markers_from_table('downloads/Microhap_alleleF_198.txt')


rule all:
    input: 'marker.tsv', 'population.tsv', 'frequency.tsv', 'frequency-1kgp.tsv'


rule marker_rsids:
    input: expand('downloads/marker-detail/{marker}.html.gz', marker=MARKERS)
    output: 'marker-rsids.tsv'
    run:
        data = {
            'Name': list(),
            'Xref': list(),
            'rsIDs': list(),
        }
        for filename in input:
            with smartopen(filename, 'r') as fh:
                name, rsids = alfred_marker_detail_scrape(fh)
                xref = filename.split('/')[-1].split('.')[0]
                rsidstr = ','.join(rsids)
                data['Name'].append(name)
                data['Xref'].append(xref)
                data['rsIDs'].append(rsidstr)
        pandas.DataFrame(data).to_csv(output[0], sep='\t', index=False)


rule dbsnp_subset:
    input:
        markers='marker-rsids.tsv',
        dbsnp=config['dbsnp38'],
        rsidx=config['dbsnp38'].replace('.vcf.gz', '.rsidx'),
    output: 'dbsnp-subset.vcf.gz'
    run:
        markers = pandas.read_csv(input.markers, sep='\t')
        rsids = list()
        for n, row in markers.iterrows():
            rsids.extend(row.rsIDs.split(','))
        rsids = ' '.join(rsids)
        command = f'rsidx search --header --out {output[0]} {input.dbsnp} {input.rsidx} {rsids}'
        shell(command)


rule marker_coords:
    input:
        script='./compile_marker_definitions.py',
        markers='marker-rsids.tsv',
        dbsnp='dbsnp-subset.vcf.gz',
    output: 'marker.tsv'
    shell: '{input} {output}'


rule population:
    input:
        freqs='downloads/Microhap_alleleF_198.txt',
        xrefs='1kgp-mapping.tsv'
    output: 'population.tsv'
    run:
        pops = {
            'ID': list(),
            'Name': list(),
            'Xref': list(),
        }
        mapping = pandas.read_csv(input.xrefs, sep='\t')
        with smartopen(input.freqs, 'r') as fh:
            for popid, name, xref in alfred_pop_data(fh, mapping):
                pops['ID'].append(popid)
                pops['Name'].append(name)
                pops['Xref'].append(xref)
        pandas.DataFrame(pops).to_csv(output[0], sep='\t', index=False)


rule frequency:
    input:
        script='./compile_frequencies.py',
        freqs='downloads/Microhap_alleleF_198.txt',
        xrefs='1kgp-mapping.tsv',
    output:
        keep='frequency.tsv',
        discard='frequency-1kgp.tsv',
    shell: '{input} {output}'
