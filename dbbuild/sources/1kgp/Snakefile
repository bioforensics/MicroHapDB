# -----------------------------------------------------------------------------
# Copyright (c) 2019, Battelle National Biodefense Institute.
#
# This file is part of MicroHapDB (http://github.com/bioforensics/microhapdb)
# and is licensed under the BSD license: see LICENSE.txt.
# -----------------------------------------------------------------------------

import pandas


def compute_marker_ae(freqs):
    aedata = {'Marker': list(), 'Population': list(), 'Ae': list()}
    pops1kgp = set([
        'CHB', 'JPT', 'CHS', 'CDX', 'KHV', 'CEU', 'TSI', 'FIN', 'GBR', 'IBS', 'YRI', 'LWK', 'GWD',
        'MSL', 'ESN', 'ASW', 'ACB', 'MXL', 'PUR', 'CLM', 'PEL', 'GIH', 'PJL', 'BEB', 'STU', 'ITU'
    ])
    for marker, mdata in freqs[freqs.Population.isin(pops1kgp)].groupby('Marker'):
        for population, pdata in mdata.groupby('Population'):
            ae = 1.0 / sum([f ** 2 for f in pdata.Frequency])
            aedata['Marker'].append(marker)
            aedata['Population'].append(population)
            aedata['Ae'].append(ae)
    return pandas.DataFrame(aedata).sort_values(['Marker', 'Population'])


rule all:
    input: 'frequency.tsv', 'marker-informativeness.tsv', 'marker-aes.tsv', 'marker-fst.tsv'


rule aes:
    input: 'frequency.tsv'
    output: 'marker-aes.tsv'
    run:
        freqs = pandas.read_csv(input[0], sep='\t')
        aedata = compute_marker_ae(freqs)
        aedata.to_csv(output[0], sep='\t', index=False, float_format='%.4f')


rule markerrsids:
    input: 'get-marker-rsids.py'
    output: 'marker-rsids-MicroHapDB-0.5.tsv'
    shell: './get-marker-rsids.py > marker-rsids-MicroHapDB-0.5.tsv'


rule freqs:
    input:
        'mhfreqs.py',
        'sample-pops.tsv',
        'marker-rsids-MicroHapDB-0.5.tsv'
    output:
        'frequency.tsv'
    shell: './mhfreqs.py sample-pops.tsv marker-rsids-MicroHapDB-0.5.tsv > frequency.tsv'


rule informativeness:
    input:
        'prepinfocalc.py',
        'infocalc',
        'cleanup-in.py',
        'sample-pops.tsv',
        'marker-rsids-MicroHapDB-0.5.tsv'
    output:
        'marker-informativeness.tsv',
        'individual-haplotypes.txt'
    shell:
        '''
        ./prepinfocalc.py sample-pops.tsv marker-rsids-MicroHapDB-0.5.tsv > individual-haplotypes.txt
        ./infocalc -column 2 -numpops 26 -input individual-haplotypes.txt -output marker-informativeness.txt
        ./cleanup-in.py < marker-informativeness.txt > marker-informativeness.tsv
        '''


rule fst:
    input:
        'fstcalc.py',
        'individual-haplotypes.txt'
    output:
        'marker-fst.tsv'
    shell: './fstcalc.py individual-haplotypes.txt > marker-fst.tsv'
